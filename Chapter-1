Chapter 1 Takeaways


There Will Be Code
"They are hoping that one day we will discover a way to create machines that can do what we want rather than what we say"... "This will never happen." p.2

"Remember that code is really the language in which we ultimately express the requirements." p.2

"We will never eliminate necesssary precision." p.2

Bad Code
"LeBlanc's law: 'Later equals never'" p.4

The Grand Redesign in the Sky
"Keeping your code clean is not just cost effective; it's a matter of professional survival." p.5

Attitude
"The managers and marketers look to us for the information they need to make promises and commitments; and even when they don't look to us, we should not be shy about telling them what we think. The users look to us to validate the way the requirements will fit into the system. The project managers look to us to help work out the schedule. We are deeply complicit in the planning of the project and share a great deal of the responsibility for any failures; especially if those failures have to do with bad code!" p. 5-6

The Primal Conundrum
"The only way to go fast --- is to keep the code as clean as possible at all times." p.6

Bjarne Stroustrup
"Elegant... pleasingly graceful and stylish in appearance or manner; pleasingly ingenious and simple." p.7

"Bad code tempts the mess to grow." p.8

"Clean code is focused. Each function, each class, each module exposes a single-minded attitude that remains entirely undistracted, and unpolluted, by the surrounding details." p.8

Grady Booch
"Grady makes osme of the same points as Bjarne, but he takes a readability perspective. I especially like his view that clean code should read like well-written prose." p.8

"Big" Dave Thomas
"Clean code makes it easy for other people to enhance it." p.9

Code, without tests, is not code. No matter how elegant it is, no matter how readable and accesible, if it hath not tests, it be unclean." p.9

"Smaller is better." p.9

"Code should be literate... composed in such a form as to make it readable by humans." p.9

Michael Feathers
"Written by someone who cares" p.10

"Someone has taken the time to keep it simple and orderly. They have paid appropriate attention to details. They have cared." p.10

Ron Jeffries
"No duplication, one thing, expressiveness, timy abstractions. Everything is there." p.11

Ward Cunningham
"Ward expects that when you read clean code you won't be surprised at all." p. 12

"It is not the language that makes programs appear simple. It is the programmer that make the language appear simple!" p.12

Schools of Thought
"None of these different schools is absolutely right." p.13

We are Authors
Authors have readers and are "responsible for communicating well with their readers." p.13

"Time spent reading vs writing is well over 10:1... Because this ratio is so high, we want the reading of code to be easy." p.14

The Boy Scout Rule
"Leave the campground cleaner than you found it." p.14

"The cleanup doesn't have to be something big. Change one variable name for the better, break up one function that's a little too large, eliminate one small bit of dupliation, clean up one composite if statment." p.14

Conclusion
"Books on art don't promise to make you an artist. All they can do is give you some of the tools, techniques, and thought processes that other artists have used." p.15

"Remember the old joke about the  oncert violinist who got lost on his way to a performance? He stopped an old man on the corner and asked him how to get to Carnegie Hall. The old man looked at the violinist and the violin tucked under his arm, and said: 'Practice, son. Practice!'" p.15

We will never be able to elminate necessary precision... so there will always need to be code. Why not make it clean while we are at it. p.1
